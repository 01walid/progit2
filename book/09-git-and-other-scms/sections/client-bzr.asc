==== Git and Bazaar

There are many projects that allow you to use Git as a Bazaar client.
Here we'll use Felipe Contreras' project that you may find at https://github.com/felipec/git-remote-bzr[].
To install it, you just have to download the file git-remote-bzr in a folder contained in your `$PATH`:
[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

You also need to have Bazaar installed.

That's all!

===== Create a Git repository from a Bazaar repository

It is simple to use.
It is enough to clone a Bazaar repository prefixing it by `bzr::`.
If you worked in a local Bazaar repository and pushed to a remote one, it is better to clone the remote.
That will make your work simpler; else you must go through your local repository and you may have problems when pushing to the remote if your Bazaar and Git repositories were not up-to-date.

Let's suppose that you worked with a remote repository which is at address `bzr+ssh://developer@mybazaarserver:myproject`.
Then you must clone it in the following way:
[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

You should also clean and compact the created Git repository, especially if it is a big one:
[source,console]
----
$ git gc --aggressive
----

===== Bazaar branches

Bazaar only allows you to clone branches, but a repository may contain several branches, and `git-remote-bzr` can clone both.
For example, to clone a branch:
[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

And to clone the whole repository:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

The second command clones all the branches contained in the emacs repository; nevertheless, it is possible to point out some branches:
[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Some remote repositories don't allow to list their branches, in which case you have to manually specify them, and even though you could specify the configuration in the cloning command, you may find this easier:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Ignore what is ignored with .bzrignore

As the format of the .bzrignore file is completely compatible with .gitignore's one, and as you shouldn't make a .gitignore file in your repository, it is enough to make a symbolic link to .bzrignore so that the potential changes of .bzrignore are taken into account:
[source,console]
----
$ ln -s .bzrignore .git/info/exclude
----

===== Fetch the changes of the remote repository

To fetch the changes of the remote, you pull changes as usually, using Git commands.
Supposing that your changes are on the `master` branch, you merge or rebase your work on the `origin/master` branch:
[source,console]
----
$ git pull --rebase origin
----

===== Push your work on the remote repository

Then, you create your branches, you test and commit your work as usual.
You finally push your work to the Bazaar repository:
[source,console]
----
$ git push origin master
----

===== Caveats

There are some limitations while pushing to a Bazaar repository.
Please refer to the README file of the project's Git repository (https://github.com/felipec/git-remote-bzr[]) for more information about this.

===== Summary

As Git and Bazaar are close, you can work in a Git repository and transparently push your work to a Bazaar repository.
Be careful anyway to the limitations.
