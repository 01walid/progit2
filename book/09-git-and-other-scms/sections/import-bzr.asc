==== Bazaar
(((Bazaar)))(((Importing, from Bazaar)))

Bazaar is a distributed source management content like Git.
It is very easy to convert a Bazaar repository into a Git repository thanks to Bazaar's plugin system.
To convert a Bazaar repository into a Git repository, you have first to import the bzr-fastimport plugin.
Here is the whole procedure if you have not yet imported any plugin:
[source,console]
----
$ mkdir --parents ~/.bazaar/plugins/bzr # creates the necessary folders for the plugins
$ cd ~/.bazaar/plugins/bzr
$ bzr branch lp:bzr-fastimport fastimport # imports the fastimport plugin
$ cd fastimport
$ sudo python setup.py install --record=files.txt
----

There you go!
You've just installed the fastimport plugin.


===== Case of a project with a single branch

Now go in the directory that contains your Bazaar repository and initialize the Git repository:
[source,console]
----
$ cd path/to/the/bzr/repository
$ git init
----

Now, you can simply export your Bazaar repository and convert it into a Git repository using the following command:
[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

You may get the following error message:
[source,console]
----
bzr: ERROR: Unable to import library "fastimport": bzr-fastimport requires the fastimport python module
----

This message is displayed because the fastimport python module that the `bzr fast-export` command needs is missing.
Install it from your package manager if you are under GNU/Linux or download it at address https://pypi.python.org/pypi/fastimport/[] if you are under Windows.
For example, with Fedora, you would do the following:

[source,console]
----
$ sudo dnf install python-fastimport
----

Now you can export your Bazaar repository to the Git repository.

Depending on the size of the project, your Git repository is built in a lapse from a few seconds to a few minutes.

At this point, if you type `git status`, you'll see that the tracked files are now marked as removed for the next commit.
Here is an example:
[source,console]
----
$ git status
On master branch
Changes that will be validated:
  (use "git reset HEAD <fichier>..." to unstage)

        removed :        .bzrignore
        removed :        file.txt

Untracked files:
  (use "git add <fichier>..." to include in what will be validated)

        .bzr/
        .bzrignore
        file.txt
----

You can restore the repository in a correct state very simply with the `git reset` command:
[source,console]
----
$ git reset HEAD .
----

Now let us have a look at the files to ignore.
As .bzrignore's format is completely compatible with .gitignore's format, the simplest is to rename your .bzrignore file:
[source,console]
----
$ git mv .bzrignore .gitignore
----

Let us check your repository's status:
[source,console]
----
$ git status
On master branch
Changes that will be validated :
  (use "git reset HEAD <fichier>..." to unstage)

        renamed :         .bzrignore -> .gitignore

Untracked files:
  (use "git add <fichier>..." to include in what will be validated)

        .bzr/

----

Then you have to create a commit that contains those changes for the migration:
[source,console]
----
$ git commit -am 'Migration from Bazaar to Git'
----

That's all!
Now you can push the repository onto its new home server:
[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

===== Case of a project with a main branch and a working branch

You can also import a Bazaar repository that contains branches.
Let us suppose that you have two branches: one represents the main branch (myProject.trunk), the other one is the working branch (myProject.work).
[source,console]
----
$ ls
myProject.trunk myProject.work
----

Create the Git repository and go into it:
[source,console]
----
$ git init git-repo
$ cd git-repo
----

Pull the master branch into git:
[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

Pull the working branch into Git:
[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Now `git branch` shows you the `master` branch as well as the `work` branch.
Check the logs to make sure they’re complete and get rid of the `marks.bzr` and `marks.git` files.

Your Git repository is ready to use.
