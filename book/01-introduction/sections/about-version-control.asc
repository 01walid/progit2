=== عن انظمة ادارة النسخ

ما هي "ادارة النسخ"؟ ولماذا علينا الاهتمام بذلك؟

ادارة النسخ هي عبارة عن انظمة تقوم بعمل تسجيل للتغيرات والتعديلات التي تحدث علي ملف او مجموعة من الملفات علي مر الوقت و بهذه الانظمة تستطيع ان تسترجع نسخا قديمة من ملفاتك في اي وقت تشاء.

علي سبيل المثال، هذا الكتاب فيه بعض من المقتطفات من بعض الشيفرات المصدرية علي هيئة ملفات قمنا بادارتها باستخدام نظام الادارة Git، ضع في اعتبارك انه ليست فقط ملفات الشيفرات المصدرية هي مايمكنك ادارتها، ولكن ايضا اي نوع من الملفات علي حاسوبك.

ان كنت مصمم رسوميات او مواقع و ترغب في حفظ كل نسخة من الصور لديك (وبالتاكيد فأنت تحتاج ذلك في عملك اليومي) فستجد ان انظمة ادارة النسخ هي افضل شئ يمكنك استخدامه لذلك الغرض.

انظمة ادارة الملفات تجعل بامكانك الرجوع بالملفات في نسخ سابقة منها بمنتهي البساطة، او حتي العودة بالمشروع كاملا الي نسخة قديمة منه، او مقارنة التغيرات التي طرأت علي مر الوقت و اكثر من ذلك يمكنك مشاهدة من قام بالتعديلات و هذا يسهل جدا عملية اكتشاف اي خطأ طرأ علي مشروعك او ملفاتك ووقت حدوث ذلك.

ايضا استخدامك لنظام ادارة النسخ يجعلك في امان ان حدث و فقدت بعض الملفات او طرأ شئ ضار علي بعضها، فيمكنك بسهولة تامة ارجاعها لحالتها السابقة.

==== انظمة ادارة النسخ المحلية

الطريقة المتبعة لدي الغالبية لادارة ملفاتهم هي مجرد نسخ الملفات الي مجلد اخر جديد (ربما مسمي بالتاريخ الذي انشئ فيه).

هذه الطريقة لها شهرتها بسبب انها بسيطة للغاية، لكنها ايضا لها عواقبها فهي تتسبب في العديد والعديد من الاخطء. فمن السهل جدا ان تنسي اي مجلد انت فيه الان، و تقوم بالتعديل في المجلد الخاطئ او تقوم بنسخ ملف ما منه الي مجلد اخر عن طريق الخطأ.

لذا لحل هذا المشكل، قام المبرمجون من فترة طويلة بتطوير انظمة ادارة النسخ المحلية و التي تحتوي علي قاعدة بيانات بسيطة يخزن فيها التغيرات الطارئة علي الملفات.

نظام ادارة المحتوي المحلي
image::images/local.png[Local version control diagram]

واحدة من انظمة ادارة النسخ المحلية هي RCS و التي توزع مع العديد من الحواسب لهذا اليوم.

حتي نظام التشغيل المشهور Mac OS X يحتوي علي اداة 'rcs' عندما تقوم بتنصيب ادوات التطوير عليه.

تعمل RCS علي ابقاء التغيرات بين الملفات في هيئة خاصة علي القرص الصلب. بعد ذلك يمكن ل RCS  ان تعيد اي ملف الي حالتة القديمة في اي وقت و ذلك فقط باسترجاع التغيرات الطارئة كلها واضافتها لبعضها.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every checkout is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
